version: 2.1

orbs:
  win: circleci/windows@5.0
  go: circleci/go@1.11

env: &env
  environment:
    GO111MODULE: auto
    GRUNTWORK_INSTALLER_VERSION: v0.0.39
    MODULE_CI_VERSION: v0.57.0
    TERRATEST_LOG_PARSER_VERSION: v0.37.0
    GOLANG_VERSION: 1.21.1
    # Configuration to clone repo
    GOPRIVATE: "github.com/gruntwork-io/*"

defaults: &defaults
  docker:
    - image: 087285199408.dkr.ecr.us-east-1.amazonaws.com/circle-ci-test-image-base:go1.21.9-tf1.5-tg58.8-pck1.8-ci56.0
  <<: *env

run_precommit: &run_precommit
  # Fail the build if the pre-commit hooks don't pass. Note: if you run $ pre-commit install locally within this repo, these hooks will
  # execute automatically every time before you commit, ensuring the build never fails at this step!
  name: run pre-commit hooks
  command: |
    pre-commit install
    pre-commit run --all-files

install_tofu: &install_tofu
  name: Install OpenTofu
  command: |
    pushd .
    cd /tmp
    curl -L "https://github.com/opentofu/opentofu/releases/download/v1.7.0/tofu_1.7.0_linux_amd64.zip" -o tofu.zip
    unzip -o tofu.zip
    sudo install -m 0755 tofu /usr/local/bin/tofu
    rm -rf tofu
    rm -rf tofu.zip
    popd
    tofu --version

install_gruntwork_utils: &install_gruntwork_utils
  name: install gruntwork utils
  command: |
    curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
    gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
    gruntwork-install --module-name "git-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
    gruntwork-install --binary-name "terratest_log_parser" --repo "https://github.com/gruntwork-io/terratest" --tag "${TERRATEST_LOG_PARSER_VERSION}"
    configure-environment-for-gruntwork-module \
      --mise-version "NONE" \
      --terraform-version "NONE" \
      --terragrunt-version "NONE" \
      --packer-version "NONE" \
      --go-version ${GOLANG_VERSION}
#----------------------------------------------------------------------------------------------------------------------
# BUILD JOBS
#----------------------------------------------------------------------------------------------------------------------
jobs:
  precommit:
    <<: *env
    docker:
      - image: 087285199408.dkr.ecr.us-east-1.amazonaws.com/circle-ci-test-image-base:go1.21.9-tf1.5-tg39.1-pck1.8-ci54.0
    steps:
      - checkout
      # Fail the build if the pre-commit hooks don't pass. Note: if you run pre-commit install locally, these hooks will
      # execute automatically every time before you commit, ensuring the build never fails at this step!
      - run:
          <<: *run_precommit
  tests:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:R1U5ucEcu9pdl4mgfNo7kv7Lm6L4edvDSn9R3auqov4"
      - checkout
      - attach_workspace:
          at: /home/circleci
      - run:
          <<: *install_gruntwork_utils
      - run:
          <<: *install_tofu
      - run:
          name: Install tools
          command: |
            make tools
      - run:
          name: Tidy check
          command: |
            export GIT_SSH_COMMAND="ssh -i /home/circleci/.ssh/id_rsa_78a64a8391239adcd479c9be8b1903c7 -o IdentitiesOnly=yes"
            go mod tidy
      - run:
          name: Run lint
          command: |
            make lint
      - run:
          command: |
            mkdir -p logs
            run-go-tests --parallelism 1 --packages "$(go list ./... | grep -v /test | tr '\n' ' ')"  | tee logs/unit.log
      - run:
          name: Terratest log parser
          command: |
            terratest_log_parser --testlog logs/unit.log --outputdir logs
          when: always
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs
  integration_tests:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:R1U5ucEcu9pdl4mgfNo7kv7Lm6L4edvDSn9R3auqov4"
      - checkout
      - attach_workspace:
          at: /home/circleci
      - run:
          <<: *install_gruntwork_utils
      - run:
          <<: *install_tofu
      - run:
          name: Install tools
          command: |
            make tools
      - run:
          name: Tidy check
          command: |
            export GIT_SSH_COMMAND="ssh -i /home/circleci/.ssh/id_rsa_78a64a8391239adcd479c9be8b1903c7 -o IdentitiesOnly=yes"
            go mod tidy
      - run:
          command: |
            mkdir -p logs
            run-go-tests --packages "$(go list ./... | grep /test | tr '\n' ' ')" | tee logs/integration.log
      - run:
          name: Terratest log parser
          command: |
            terratest_log_parser --testlog logs/integration.log --outputdir logs
          when: always
      - store_artifacts:
          path: logs
      - store_test_results:
          path: logs
  test_windows:
    executor:
      name: win/default
      size: "large"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:R1U5ucEcu9pdl4mgfNo7kv7Lm6L4edvDSn9R3auqov4"
      - checkout
      - run:
          name: Install golang
          shell: powershell.exe
          command: ./.circleci/install-golang.ps1
      - run:
          name: Install Opentofu
          shell: powershell.exe
          command: ./.circleci/install-opentofu.ps1
      - run:
          name: Run go terraform tests
          shell: powershell.exe
          command: |
            # to save time, we're running the tests in one go
            $env:GIT_SSH_COMMAND="ssh -i /home/circleci/.ssh/id_rsa_78a64a8391239adcd479c9be8b1903c7 -o IdentitiesOnly=yes"
            echo $env:GIT_SSH_COMMAND
            
            go mod tidy
            go test -v ./...

  build:
    resource_class: xlarge
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:R1U5ucEcu9pdl4mgfNo7kv7Lm6L4edvDSn9R3auqov4"
      - checkout
      - run:
          <<: *install_gruntwork_utils
      - run: |
          export GIT_SSH_COMMAND="ssh -i /home/circleci/.ssh/id_rsa_78a64a8391239adcd479c9be8b1903c7 -o IdentitiesOnly=yes"
          go mod tidy
          build-go-binaries --app-name terragrunt-iac-engine-opentofu --dest-path bin --ld-flags "-X github.com/gruntwork-io/go-commons/version.Version=$CIRCLE_TAG -extldflags '-static'"
      - persist_to_workspace:
          root: .
          paths: [bin]
      - store_artifacts:
          path: bin
  release:
    <<: *env
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: "1.21.1"
      - run:
          name: Install sign-binary-helpers
          command: |
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "sign-binary-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "github-release-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --branch "github-release-helpers"
      - run:
          name: Compile and sign the binaries
          command: |
            export AC_PASSWORD=${MACOS_AC_PASSWORD}
            export AC_PROVIDER=${MACOS_AC_PROVIDER}

            sign-binary --os mac --install-macos-sign-dependencies .gon_amd64.hcl
            sign-binary --os mac .gon_arm64.hcl
            echo "Done signing the binary"
            mkdir -p bin
           
            # Replace the files in bin. These are the same file names generated from .gon_amd64.hcl and .gon_arm64.hcl
            unzip terragrunt-iac-engine-opentofu_amd64.zip
            mv terragrunt-iac-engine-opentofu_darwin_amd64 bin/

            unzip terragrunt-iac-engine-opentofu_arm64.zip
            mv terragrunt-iac-engine-opentofu_darwin_arm64 bin/
      - run:
          name: Install required packages
          command: |
            brew install coreutils gpg gh
            # setting sign key
            echo "${GW_ENGINE_GPG_KEY}" | base64 --decode > privatekey.asc
            echo "${GW_ENGINE_GPG_KEY_PW}" | gpg --batch --yes --import privatekey.asc
            KEY_ID=$(gpg --list-keys --with-colons | awk -F: '/^pub/{print $5}')
            echo -e "trust\n5\ny\n" | gpg --command-fd 0 --edit-key $KEY_ID trust
            mkdir -p ~/.gnupg
            echo "default-key $KEY_ID" >> ~/.gnupg/gpg.conf
      - run:
          name: Package release files
          command: |
            export TAG="${CIRCLE_TAG}"
            export VERSION=${TAG%-rc*}
            mkdir -p release
            sign-files --source-dir $(pwd)/bin --out-dir $(pwd)/release --name terragrunt-iac-engine-opentofu --version ${VERSION}
            ls -lahrt bin/
            ls -lahrt release/
            #./.circleci/sign-files.sh
            #./.circleci/create-release.sh
      - persist_to_workspace:
          root: .
          paths: [release]
      - store_artifacts:
          path: release
#----------------------------------------------------------------------------------------------------------------------
# WORKFLOWS
#----------------------------------------------------------------------------------------------------------------------
workflows:
  version: 2
  build-and-test:
    jobs:
      - precommit:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
          filters:
            tags:
              only: /^v.*/
      - tests:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
            - SLACK__TOKEN__refarch-deployer-test
            - SLACK__WEBHOOK__refarch-deployer-test
            - SLACK__CHANNEL__test-workflow-approvals
          requires:
            - precommit
          filters:
            tags:
              only: /^v.*/
      - integration_tests:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
          requires:
            - precommit
      - test_windows:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
          requires:
            - precommit
      - build:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
          requires:
            - precommit
      - release:
          requires:
            - build
          filters:
            tags:
              only: /^.*-rc.*$/
#            branches:
#              ignore: /.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GCP__automated-tests
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
            - TERRAGRUNT_ENGINE__circle-ci
